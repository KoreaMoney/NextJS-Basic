@Date Nov 2023
@Author Kim Dowon
@Description NextJS의 기본적인 사용방법과 구조형식을 작성합니다.
---------------------------------------------------------------
👉 프로젝트 구조
- scr폴더 안에는 app폴더가 있고 app폴더 안에는 pages
- dependencies의 node_modules
- 외부에 노출되는 public
- eslint규칙을 정의할 수 있는 eslintrc.json파일
- git에 commit하지 말아야 할 것
- next-env.d.ts는 수정하지 말아야 한다.
- next가 읽어가는 경로를 보여주는 next.config파일
- react에서 볼 수 있는 package.json파일

👉 NextJS실행하기 (package.json파일 파악도 해보기)

 "scripts": {
    "dev": "next dev", - 개발용 모드
    "build": "next build", - 서버에 배포한 뒤에 프로젝트를 빌드할 때
    "start": "next start", - 서버에 배포한 뒤 빌드 후 실행할 때 사용
    "lint": "next lint" - 프로젝트 소스코드를 검사할 때 사용 (EsLint)
  },

  - yarn dev로 실행하기

👉 NextJS에서 구성하는 기본적인 내용
 1. app폴더에 page라는 폴더를 만들면 routing이 자동으로 진행된다.
 2. 🗣️build
    - yarn build
    - app폴더 안에 어떤 폴더들이 route되어 있는지 확인 가능하고 크기가 얼마인지 알 수 있다.
    - 처음으로 load되는 Javascript의 크기도 알 수 있다.
    - SSG으로 되어 있는지 SSR인지 ISR인지 CSR인지도 확인할 수 있다.
    - build이후에는 yarn start로 시작하면 된다.
 3. 🗣️정적 Routing
    - pages안에 있는 파일을 routing하고 싶다면 app폴더에 pages의 해당하는 것을 폴더를 만들고 그 안에 page.tsx를 생성하여 routing처리하게 한다.
    - web에서 /about을 하면 어떤 사람이던지 항상 같은 페이지가 라우팅되는 것을 말한다.
 4. 🗣️동적 Routing
    - 수많은 페이지들이 존재하여 각각의 페이지들을 전부 정적으로 만든다면, 너무 힘들기 때문에 제품 페이지별로 해당하는 항목이 들어가면 페이지가 이동되게 하기 위해 만들어 졌다.
    - []를 사용해서 대괄호 안에는 사용하고 싶은 keyword아무거나 사용해도 된다.(일반적으로 slug를 많이 작성한다.)
    - 동적 route의 결과를 update해줘야 하는데 여기에서 nextJS는 자동으로 component에 prop으로 데이터를 주기 때문이다.
 5. 🗣️페이지 미리 생성하기 (SSG)
    - generateStaticParams 함수를 사용해서 미리 page를 만들어 놓는다.
 6. 🗣️Not Found
    - notFound()함수가 실행이 되면 내가 만든 not-found.tsx가 실행이 되면서 에러 메세지를 보여준다.
    - app폴더 최상단에 not-found.tsx를 만들면 /뒤에 잘못 작성될 경우 app폴더 최상단에 있는 not-found가 실행이 되고 기존 nextJS의 404에러는 실행이 되지 않는다.
 7. 🗣️Link
    - 여기에서는 단순히 react-router-dom을 사용하지 않고도 next/Link를 사용하여 페이지 전환을 할 수 있다.
 8. 🗣️SEO
    - 검색 최적화를 위해 진행
    - metadata라는 next에서 제공하는 것을 사용하여 SEO를 진행한다.
    - metadata가 작성되는 곳은 각각의 폴더가 가지는 가장 최상위인 layout에서 진행한다.
    - generateMetadata을 사용하고 params를 하면 web페이지에 맞게 SEO를 설정할 수 있다.
    - 참고 LINK : https://nextjs.org/docs/app/building-your-application/optimizing/metadata
 9. 🗣️Prefetch
    - Next.js는 기본적으로 요청에 따라 Static html, 혹은 SSR의 결과 HTML을 먼저 던져주고, client에서 javascript를 전부 다운로드하면 React가 굴러가는 방식대로 다시 DOM을 구성해 사용자에게 보여준다.
    - 미리 가져오는 작업을 해서 빠른 Routing 전환도 가능하다.
 
 👉 하이브리드와 하이드레이션 및 렌더링 방식
 1. NextJS 13버전 이후로 "페이지" 단위로 렌더링 방식을 규정하는 것이 아닌 "컴포넌트" 단위로 렌더링 방식을 규정하는 것으로 변경되었다.
 
 👉 Server component
 1. app폴더에 있는 component는 기본적으로 server componet이다.
 2. console.log를 진행해도 web의 console에 나타나지 않고 terminal에 나온다.
 3. nodeJS에서 제공하는 node API도 사용이 가능하다.
 4. 단, 브라우저에서 제공해주는 api는 사용할 수 없다.

 👉 Client Components
 1. client component를 사용하고 싶다면 사용하고자 하는 component최상단에 'use client'을 작성하여 client component라고 인식시켜줘야 한다.
 2. app폴더에는 page와 관련된 내용을 담고 공통적으로 사용되는 client component의 항목들을 따로 components폴더를 생성하여 관리하는 것이 좋다.
 3. 사용되어야 하는 경우
   - 사용자 이벤트 (onClick, onChange etc.)
   - useState etc 사용해야하는 경우
   - 브라우저 API를 사용해야하는 경우
   - Custom hook을 사용해야하는 경우
 4. 절대 하지말아야 행위
   - 전체 컴포넌트를 client component로 구성하면 안된다.
   - 오직 작은 단위 component로 구성하고 필요한 경우에만 사용하는 것이 성능에 좋다.
 *공식 Doc : https://nextjs.org/docs/app/building-your-application/rendering/client-components
  
 👉 SSG에서 ISR로 변경하기
 1. export const revalidate = revalidate되는 초를 작성해준다 (ex. 3이면 3초를 의미하고 3600초면 한시간을 의미한다.)
 2. 확인하고 싶다면 yarn dev로 하면 항상 SSR로 구동되기 때문에 build를 진행하고 실제 사용자들이 체감하는 것을 확인하기 위해 start를 한다.
  *공식 Doc : https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating

 👉 fetch를 사용한 SSR.ISR,SSR구축하기
 - api는 임시 데이터, {}로 option으로 넣을 수 있다.
 - 만약 revalidate를 0으로 하면 SSR로 구축 할 수 있다.
 - next:{}옵션 대신 cache : "no-store"를 사용해도 된다.
 * const res = await fetch('https://meowfacts.herokuapp.com', {
        next: { revalidate: 3 },
    }); 
   const data = await res.json();
   const factTexts = data.data[0];